<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>圈多多</description>
    <link>https://sysu-swsad-team.github.io//</link>
    <atom:link href="https://sysu-swsad-team.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Jun 2019 15:35:36 +0800</pubDate>
    <lastBuildDate>Thu, 20 Jun 2019 15:35:36 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>X2.08 16340232-使用 Django session 实现用户登录</title>
        <description>&lt;h1 id=&quot;django-的-session-框架&quot;&gt;Django 的 Session 框架&lt;/h1&gt;

&lt;p&gt;session 可以存储和获取访问者的数据信息，这些信息保存在服务器上（默认是数据库中），以 cookies 的方式发送和获取一个包含  session ID 的值，并不是用 cookies 传递数据本身，从而避免了大部分的常见 cookie 问题。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;启用-session&quot;&gt;启用 session&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;编辑 settings.py 中的一些配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MIDDLEWARE_CLASSES&lt;/strong&gt; 确保其中包含以下内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'django.contrib.sessions.middleware.SessionMiddleware',
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;INSTALLED_APPS&lt;/strong&gt; 是包含&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'django.contrib.sessions',
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这些是默认启用的。如果不用的话，也可以关掉这个以节省一点服务器的开销。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;在视图中使用-session&quot;&gt;在视图中使用 session&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;request.session&lt;/strong&gt; 可以在视图中任何地方使用，它类似于 python 中的字典&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 创建或修改 session：
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 获取 session：
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 删除 session
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delrequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 不存在时报错`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;一个简化的登陆认证：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#  用户登录
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csrf_exempt&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# If we didn't post, send the test cookie along with the login form.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_test_cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Check that the test cookie worked (we set it below):
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_cookie_worked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# The test cookie worked, so delete it.
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_test_cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# logic to check username/password
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#用户验证
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#用户登录
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You're logged in.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Invalid login details given&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# The test cookie failed, so display an error message. If this
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# were a real site, we'd want to display a friendlier message.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please enable cookies and try again.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        
&lt;span class=&quot;c1&quot;&gt;#  用户登出
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csrf_exempt&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;login_required&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You're logged out.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当登陆时验证用户名和密码，并保存用户 id 在 session 中，这样就可以在视图中用 request.session[‘member_id’] 来检查用户是否登陆，当退出的时候，删除掉它。&lt;/p&gt;

&lt;h2 id=&quot;重写-authenticate-实现邮箱和用户名登录&quot;&gt;重写 authenticate 实现邮箱和用户名登录&lt;/h2&gt;

&lt;p&gt;1、在 setting.py 中进行配置：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'questionnaire.custom.EmailOrUsernameModelBackend'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用的认证后台通过 AUTHENTICATION_BACKENDS 设置指定。它应该是一个包含 Python 路径名称的元组，它们指向的 Python 类知道如何进行验证。这些类可以位于 Python 路径上任何地方。&lt;/p&gt;

&lt;p&gt;2、在 custom.py 中重新定制 authenticate() 方法&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailOrUsernameModelBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    This is a ModelBacked that allows authentication with either a username or an email address.

    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# n.b. Django &amp;lt;2.1 does not pass the `request`
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_user_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USERNAME_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# The `username` field is allows to contain `@` characters so
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# technically a given email address could be present in either field,
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# possibly even for different users, so we'll query for all matching
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# records and test each one.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_default_manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USERNAME_FIELD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email__iexact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Test whether any matched user has the provided password:
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Run the default password hasher once to reduce the timing
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# difference between an existing and a non-existing user (see
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# https://code.djangoproject.com/ticket/20760)
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;user_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;在 django 中对数据库中的内容进行查询时，有时需要包含多个查询条件，此时采用 Q() 方法就很方便了。Q对象 (django.db.models.Q) 可以对关键字参数进行封装，从而更好地应用多个查询。可以组合使用 &amp;amp;（and）,&lt;/td&gt;
          &lt;td&gt;（or），~（not）操作符，当一个操作符是用于两个 Q 的对象,它产生一个新的Q对象。&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;因为在 django 中用户的密码存储在数据库中是经过加密的，如果直接用 password==password 来进行验证是不对的。通过 user.check_password(password) 方法来进行验证密码是否正确。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;使用-postman-进行测试&quot;&gt;使用 Postman 进行测试&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/styles/images/X2.08/test_login1.jpg&quot; alt=&quot;postman_test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/styles/images/X2.08/test_login2.jpg&quot; alt=&quot;postman_test&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//x2.%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/X2.08.16340232-Django_session%E4%BB%8B%E7%BB%8D/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//x2.%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/X2.08.16340232-Django_session%E4%BB%8B%E7%BB%8D/</guid>
        
        
        <category>X2.技术与工作报告</category>
        
      </item>
    
      <item>
        <title>X2.07 16340190-Axios简介</title>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;axios&quot;&gt;Axios&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;基于promise用于浏览器和node.js的http客户端&lt;/strong&gt;
其特点为：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;支持浏览器和node.js&lt;/li&gt;
  &lt;li&gt;支持promise&lt;/li&gt;
  &lt;li&gt;能拦截请求和响应&lt;/li&gt;
  &lt;li&gt;能转换请求和响应数据&lt;/li&gt;
  &lt;li&gt;能取消请求&lt;/li&gt;
  &lt;li&gt;自动转换JSON数据&lt;/li&gt;
  &lt;li&gt;浏览器端支持防止CSRF（跨站请求伪造）
    &lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;使用npm&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用bower&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bower install axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用cdn&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;基本使用说明&quot;&gt;基本使用说明&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;执行 GET 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;axios.get('/user', {
    params: {
      ID: 12345
    }
  }).then(function (response) {
    console.log(response);
  }).catch(function (error) {
    console.log(error);
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;执行 POST 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }).then(function (response) {
    console.log(response);
  }).catch(function (error) {
    console.log(error);
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;执行多个并发请求&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getUserAccount() {
  return axios.get('/user/12345');
}
function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}
axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 两个请求现在都执行完成
  }));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;通过向-axios-传递相关配置来创建请求&quot;&gt;通过向 axios 传递相关配置来创建请求&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;axios(config)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 发送 POST 请求
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;axios(url[, config])&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 发送 GET 请求（默认的方法）
axios('/user/12345');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;方法别名&lt;/strong&gt;
```
// 在使用别名方法时， url、method、data 这些属性都不必在配置中指定。
axios.request(config)
axios.get(url[, config])
axios.delete(url[, config])
axios.head(url[, config])
axios.options(url[, config])
axios.post(url[, data[, config]])
axios.put(url[, data[, config]])
axios.patch(url[, data[, config]])&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// 处理并发请求的助手函数
axios.all(iterable)
axios.spread(callback)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 实例创建
- **axios.create([config])**

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;const instance = axios.create({
  baseURL: ‘https://some-domain.com/api/’,
  timeout: 1000,
  headers: {‘X-Custom-Header’: ‘foobar’}
})
// 可用的实例方法
axios#request(config)
axios#get(url[, config])
axios#delete(url[, config])
axios#head(url[, config])
axios#options(url[, config])
axios#post(url[, data[, config]])
axios#put(url[, data[, config]])
axios#patch(url[, data[, config]])&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 请求配置

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;{
// url 必须的，用于请求的服务器URL
url: ‘/user’,&lt;/p&gt;

&lt;p&gt;// 创建请求时使用的方法，如果没有指定，将默认使用get
method: ‘post’,&lt;/p&gt;

&lt;p&gt;// baseURL将自动加载url前，除非‘url’是一个绝对url
// 可以通过设置一个‘baseURL’便于为axios实例的方法传递相对url
baseURL: ‘https://baseurl.com/api/’,&lt;/p&gt;

&lt;p&gt;// transformRequest允许在向服务器发送前，修改请求数据，只能用‘PUT’，‘POST’和
// ‘PATCH’这几个请求方法。后面数组中的函数必须返回一个字符串或ArrayBuffer或Steam
transformRequest: [function (data, headers) {
  // 对data进行任意转换处理
  return data
}],&lt;/p&gt;

&lt;p&gt;// transformResponse在传递给then/catch前，允许修改响应数据
transformResponse: [function (data) {
  // 对data进行任意转换处理
  return data
}],&lt;/p&gt;

&lt;p&gt;// 即将被发送的自定义请求头
headers: {‘X-Requested-With’: ‘XMLHttpRequest’},&lt;/p&gt;

&lt;p&gt;// 即将与请求一起发送的URL参数，必须是一个无格式对象或URLSearchParams对象
params: {
  ID: 12345
},&lt;/p&gt;

&lt;p&gt;// 负责 &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; 序列化的函数
  paramsSerializer: function(params) {
    return Qs.stringify(params, {arrayFormat: ‘brackets’})
  },&lt;/p&gt;

&lt;p&gt;// 作为请求主体被发送的数据,只适用于 ‘PUT’, ‘POST’, 和 ‘PATCH’
// 在没有设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;transformRequest&lt;/code&gt; 时，必须是以下类型之一：
// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
// - 浏览器专属：FormData, File, Blob
// - Node 专属： Stream
data: {
  firstName: ‘Fred’
},&lt;/p&gt;

&lt;p&gt;// 指定请求超时的毫秒数(0 表示无超时时间), 如果请求话费了超过 &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; 的时间，请求将被中断
timeout: 1000,&lt;/p&gt;

&lt;p&gt;// 跨域请求时是否需要使用凭证,默认为false
withCredentials: false,&lt;/p&gt;

&lt;p&gt;// &lt;code class=&quot;highlighter-rouge&quot;&gt;adapter&lt;/code&gt; 允许自定义处理请求，以使测试更轻松，返回一个 promise 并应用一个有效的响应 (查阅 &lt;a href=&quot;#response-api&quot;&gt;response docs&lt;/a&gt;).
adapter: function (config) {
    /* … */
},&lt;/p&gt;

&lt;p&gt;// &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt; 表示应该使用 HTTP 基础验证，并提供凭据
// 将设置一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; 头，覆写掉现有的任意使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;headers&lt;/code&gt; 设置的自定义 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt;头
auth: {
  username: ‘axios’,
  password: ‘a1234t’
},&lt;/p&gt;

&lt;p&gt;// 服务器响应的数据类型，可以是 ‘arraybuffer’, ‘blob’, ‘document’, ‘json’, ‘text’, ‘stream’
responseType: ‘json’, // default&lt;/p&gt;

&lt;p&gt;responseEncoding: ‘utf8’, // default&lt;/p&gt;

&lt;p&gt;// &lt;code class=&quot;highlighter-rouge&quot;&gt;xsrfCookieName&lt;/code&gt; 是用作 xsrf token 的值的cookie的名称
xsrfCookieName: ‘XSRF-TOKEN’, // default&lt;/p&gt;

&lt;p&gt;// 带有xsrf的http头部的token值
xsrfHeaderName: ‘X-XSRF-TOKEN’, // default&lt;/p&gt;

&lt;p&gt;// 为上传处理进度事件
onUploadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
},&lt;/p&gt;

&lt;p&gt;// 为下载处理进度事件
onDownloadProgress: function (progressEvent) {
  // 对原生进度事件的处理
},&lt;/p&gt;

&lt;p&gt;// 允许的响应内容的最大尺寸
maxContentLength: 2000,&lt;/p&gt;

&lt;p&gt;// 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;validateStatus&lt;/code&gt; 返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; (或者设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;)，promise 将被 resolve; 否则，promise 将被 rejecte
validateStatus: function (status) {
  return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // default
},&lt;/p&gt;

&lt;p&gt;// 在 node.js 中 follow 的最大重定向数目,如果设置为0，将不会 follow 任何重定向
  maxRedirects: 5, // default&lt;/p&gt;

&lt;p&gt;// &lt;code class=&quot;highlighter-rouge&quot;&gt;socketPath&lt;/code&gt; 定义了在node.js中使用的一个UNIX Socket. socketPath和proxy只能同时定义一个，同时定义时，优先使用socketPath
socketPath: null, // default&lt;/p&gt;

&lt;p&gt;// &lt;code class=&quot;highlighter-rouge&quot;&gt;httpAgent&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;httpsAgent&lt;/code&gt; 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。
httpAgent: new http.Agent({ keepAlive: true }),
httpsAgent: new https.Agent({ keepAlive: true }),&lt;/p&gt;

&lt;p&gt;// ‘proxy’ 定义代理服务器的主机名称和端口
// &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt; 表示 HTTP 基础验证应当用于连接代理，并提供凭据
proxy: {
  host: ‘127.0.0.1’,
  port: 8080,
  auth: {
    username: ‘niffler’
    password: ‘1234l’
  }
},&lt;/p&gt;

&lt;p&gt;// 指定用于取消请求的 cancel token
cancelToken: new CancelToken(function (cancel) { })
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 响应结构

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;{
// 由服务器提供的响应
data: { },&lt;/p&gt;

&lt;p&gt;// 来自服务器响应的 HTTP 状态码
status: 200,&lt;/p&gt;

&lt;p&gt;// 来自服务器响应的 HTTP 状态信息
statusText: ‘OK’,&lt;/p&gt;

&lt;p&gt;// 服务器响应的头
headers: { },&lt;/p&gt;

&lt;p&gt;// 为请求提供的配置信息
config: { },&lt;/p&gt;

&lt;p&gt;request: { }
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;接收样例：

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;axios.get(‘/Niffler/12345’)
  .then(function(response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  })&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 配置默认值
- 全局的 axios 默认值

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;axios.defaults.baseURL = ‘https://api.example.com’;
axios.defaults.headers.common[‘Authorization’] = AUTH_TOKEN;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 自定义实例默认值

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;const instance = axios.create({
  baseURL: ‘https://api.example.com’
});&lt;/p&gt;

&lt;p&gt;instance.defaults.headers.common[‘Authorization’] = AUTH_TOKEN;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## Vue-axios基本用法
### 安装

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;$ npm install –save axios vue-axios&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在main.js页面引用：

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;import Vue from ‘vue’
import axios from ‘axios’
import VueAxios from ‘vue-axios’&lt;/p&gt;

&lt;p&gt;Vue.use(VueAxios, axios)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用：

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Vue.axios.get(api).then((response) =&amp;gt; {
  console.log(response.data)
})&lt;/p&gt;

&lt;p&gt;this.axios.get(api).then((response) =&amp;gt; {
  console.log(response.data)
})&lt;/p&gt;

&lt;p&gt;this.$http.get(api).then((response) =&amp;gt; {
  console.log(response.data)
})&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## 带cookie请求问题
 axios默认是请求的时候不会带上cookie的，需要通过设置withCredentials: true来解决。

## vue-axios-plugin
### 导入
- 使用Script

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- 在 vue.js 之后引入 --&gt;
&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://unpkg.com/vue-axios-plugin&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- npm 模块引入

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;npm install –save vue-axios-plugin&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;然后在入口文件配置如下:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;import Vue from ‘Vue’
import VueAxiosPlugin from ‘vue-axios-plugin’&lt;/p&gt;

&lt;p&gt;Vue.use(VueAxiosPlugin, {
  // 请求拦截处理
  reqHandleFunc: config =&amp;gt; config,
  reqErrorFunc: error =&amp;gt; Promise.reject(error),
  // 响应拦截处理
  resHandleFunc: response =&amp;gt; response,
  resErrorFunc: error =&amp;gt; Promise.reject(error)
})&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在 Vue 组件上添加了 $http 属性, 它默认提供 get 和 post 方法

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this.$http.get(url, data, options).then((response) =&amp;gt; {
  console.log(response)
})
this.$http.post(url, data, options).then((response) =&amp;gt; {
  console.log(response)
})&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;也可以通过 this.$axios 来使用 axios 所有的 api 方法

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this.$axios.get(url, data, options).then((response) =&amp;gt; {
  console.log(response)
})&lt;/p&gt;

&lt;p&gt;this.$axios.post(url, data, options).then((response) =&amp;gt; {
  console.log(response)
})&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 拦截器
可以截取请求或响应在被 then 或者 catch 处理之前

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;//添加请求拦截器
axios.interceptors.request.use(config =&amp;gt; {
  //在发送请求之前做某事，比如说 设置loading动画显示
  return config
}, error =&amp;gt; {
  //请求错误时做些事
  return Promise.reject(error)
})&lt;/p&gt;

&lt;p&gt;//添加响应拦截器
axios.interceptors.response.use(response =&amp;gt; {
  //对响应数据做些事，比如说把loading动画关掉
  return response
}, error =&amp;gt; {
  //请求错误时做些事
  return Promise.reject(error)
})&lt;/p&gt;

&lt;p&gt;//如果不想要这个拦截器也简单，可以删除拦截器
var myInterceptor = axios.interceptors.request.use(function () {/&lt;em&gt;…&lt;/em&gt;/})
axios.interceptors.request.eject(myInterceptor)
```&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jun 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//x2.%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/X2.07.16340190-Axios%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//x2.%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/X2.07.16340190-Axios%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid>
        
        
        <category>X2.技术与工作报告</category>
        
      </item>
    
      <item>
        <title>8.1 代码规范</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前端代码规范&quot; id=&quot;markdown-toc-前端代码规范&quot;&gt;前端代码规范&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#命名规范&quot; id=&quot;markdown-toc-命名规范&quot;&gt;命名规范&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#目录和文件采用大驼峰命名法&quot; id=&quot;markdown-toc-目录和文件采用大驼峰命名法&quot;&gt;目录和文件采用“大驼峰命名法”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#id-采用小驼峰命名法&quot; id=&quot;markdown-toc-id-采用小驼峰命名法&quot;&gt;id: 采用“小驼峰命名法”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#class-采用中划线命名法&quot; id=&quot;markdown-toc-class-采用中划线命名法&quot;&gt;class: 采用“中划线命名法”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#命名尽量避免使用中文拼音应该采用简明的英文单词进行组合&quot; id=&quot;markdown-toc-命名尽量避免使用中文拼音应该采用简明的英文单词进行组合&quot;&gt;命名尽量避免使用中文拼音，应该采用简明的英文单词进行组合&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#排版规范&quot; id=&quot;markdown-toc-排版规范&quot;&gt;排版规范&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#风格指南&quot; id=&quot;markdown-toc-风格指南&quot;&gt;风格指南&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#组件名为多个单词&quot; id=&quot;markdown-toc-组件名为多个单词&quot;&gt;组件名为多个单词&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#组件数据&quot; id=&quot;markdown-toc-组件数据&quot;&gt;组件数据&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#prop定义&quot; id=&quot;markdown-toc-prop定义&quot;&gt;Prop定义&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#为v-for设置键值&quot; id=&quot;markdown-toc-为v-for设置键值&quot;&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;设置键值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#避免v-if和v-for用在一起&quot; id=&quot;markdown-toc-避免v-if和v-for用在一起&quot;&gt;避免&lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;用在一起&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#为组件样式设置作用域&quot; id=&quot;markdown-toc-为组件样式设置作用域&quot;&gt;为组件样式设置作用域&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前端代码规范&quot;&gt;前端代码规范&lt;/h2&gt;
&lt;h3 id=&quot;命名规范&quot;&gt;命名规范&lt;/h3&gt;
&lt;h4 id=&quot;目录和文件采用大驼峰命名法&quot;&gt;目录和文件采用“大驼峰命名法”&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;例：DataBaseUser：变量DataBaseUser单词首字母大写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;id-采用小驼峰命名法&quot;&gt;id: 采用“小驼峰命名法”&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;例：myStudentCount：变量myStudentCount第一个单词全部小写，后面的单词首字母大写。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;class-采用中划线命名法&quot;&gt;class: 采用“中划线命名法”&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;例：print-employee-paychecks：函数名中的每一个逻辑断点都有一个中划线来标记。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;命名尽量避免使用中文拼音应该采用简明的英文单词进行组合&quot;&gt;命名尽量避免使用中文拼音，应该采用简明的英文单词进行组合&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;命名注意缩写，但是不能盲目缩写；&lt;/li&gt;
  &lt;li&gt;不允许通过1、2、3等序号进行命名；&lt;/li&gt;
  &lt;li&gt;避免class与id重名；&lt;/li&gt;
  &lt;li&gt;id注意用于标识模块或页面的某一个父容器区域，名称必须唯一，不要随意新建id；&lt;/li&gt;
  &lt;li&gt;class用于标识某一个类型的对象，命名必须言简意赅；&lt;/li&gt;
  &lt;li&gt;尽可能提高代码模块的复用，样式尽量用组合的方式；&lt;/li&gt;
  &lt;li&gt;规则名称中不应该包含颜色、定位等与具体显示效果相关的信息，应该用意义命名，而不是结果名称。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;排版规范&quot;&gt;排版规范&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;如果大括号内为空，则简洁写成&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;，不需要换行。如果大括号内非空，则1）左大括号前不换行有空格；2）左大括号后换行；3）右大括号前换行；4）右大括号后还有&lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;等代码则不换行；5）表示终止的右大括号后必须换行。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;testFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;左右小括号和中间字符之间不出现空格。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if/for/while/switch&lt;/code&gt;等保留字与括号之间必须加空格。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;二目、三目运算符的左右两边必须加一个空格。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;注释的双斜线与注释内容之间有且只有一个空格。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 我是注释&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** 我是注释 **/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;多个参数逗号后边必须加空格。&lt;br /&gt;
示例：
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;testFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pra1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pra2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pra3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;风格指南&quot;&gt;风格指南&lt;/h3&gt;
&lt;h4 id=&quot;组件名为多个单词&quot;&gt;组件名为多个单词&lt;/h4&gt;
&lt;p&gt;组件名应该始终为多个单词，Vue内置组件除外。这样做可以避免和现有的以及未来的HTML元素发生冲突，因为所有HTML元素的名称都是单个单词。&lt;br /&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;todo-item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;TodoItem&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;组件数据&quot;&gt;组件数据&lt;/h4&gt;
&lt;p&gt;当在组件中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;属性的时候，它的值必须是返回一个对象的函数。&lt;code class=&quot;highlighter-rouge&quot;&gt;new Vue&lt;/code&gt;除外。&lt;br /&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;some-comp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prop定义&quot;&gt;Prop定义&lt;/h4&gt;
&lt;p&gt;Prop定义应该尽量详细，至少需要指定其类型。&lt;br /&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;syncing&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;synced&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;version-conflict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;为v-for设置键值&quot;&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;设置键值&lt;/h4&gt;
&lt;p&gt;在组件上总是必须用&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;配合&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;，以便维护内部组件及其子树的状态。&lt;br /&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo in todos&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo.id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;避免v-if和v-for用在一起&quot;&gt;避免&lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;用在一起&lt;/h4&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shouldShowUsers&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user in users&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;为组件样式设置作用域&quot;&gt;为组件样式设置作用域&lt;/h4&gt;
&lt;p&gt;对于应用来说，顶级&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;组件和布局组件中的样式可以是全局的，但是其它组件应该是有作用域的。&lt;br /&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button button-close&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;X&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 使用 `scoped` 特性 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scoped&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.button-close&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&quot;https://cn.vuejs.org/v2/style-guide/index.html&quot;&gt;Vue.js风格指南&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.jianshu.com/p/bfc0650f0033&quot;&gt;命名规范和排版规范&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//8.%E7%94%9F%E4%BA%A7%E8%A7%84%E8%8C%83%E4%B8%8E%E6%8C%87%E5%8D%97/8.1.%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//8.%E7%94%9F%E4%BA%A7%E8%A7%84%E8%8C%83%E4%B8%8E%E6%8C%87%E5%8D%97/8.1.%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
        
        
        <category>8.生产规范与指南</category>
        
      </item>
    
      <item>
        <title>7.1 界面设计</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#主页&quot; id=&quot;markdown-toc-主页&quot;&gt;主页&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#发布任务&quot; id=&quot;markdown-toc-发布任务&quot;&gt;发布任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#钱包充值&quot; id=&quot;markdown-toc-钱包充值&quot;&gt;钱包充值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主页&quot;&gt;主页&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/styles/images/7.1/home.jpg&quot; alt=&quot;主页&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;发布任务&quot;&gt;发布任务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/styles/images/7.1/task.jpg&quot; alt=&quot;发布任务&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;钱包充值&quot;&gt;钱包充值&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/styles/images/7.1/wallet.jpg&quot; alt=&quot;钱包充值&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.1.%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.1.%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</guid>
        
        
        <category>7.设计说明书</category>
        
      </item>
    
      <item>
        <title>8.2 REST API设计规范</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#协议&quot; id=&quot;markdown-toc-协议&quot;&gt;协议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#url&quot; id=&quot;markdown-toc-url&quot;&gt;URL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http请求方式&quot; id=&quot;markdown-toc-http请求方式&quot;&gt;http请求方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#过滤信息&quot; id=&quot;markdown-toc-过滤信息&quot;&gt;过滤信息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数据格式&quot; id=&quot;markdown-toc-数据格式&quot;&gt;数据格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#状态码&quot; id=&quot;markdown-toc-状态码&quot;&gt;状态码&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#get&quot; id=&quot;markdown-toc-get&quot;&gt;GET&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#post&quot; id=&quot;markdown-toc-post&quot;&gt;POST&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#put&quot; id=&quot;markdown-toc-put&quot;&gt;PUT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#delete&quot; id=&quot;markdown-toc-delete&quot;&gt;DELETE&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;协议&quot;&gt;协议&lt;/h2&gt;
&lt;p&gt;使用https协议。&lt;/p&gt;
&lt;h2 id=&quot;url&quot;&gt;URL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在RESTful架构中，每个路径代表一种资源，所以路径中不能有动词，只能有名词。所用名词尽量参考数据库表的设计。&lt;/li&gt;
  &lt;li&gt;URL路径名词均为复数。为了保证URL格式的一致性，建议使用复数形式。&lt;/li&gt;
  &lt;li&gt;应该使用连字符”-“来提高URL的可读性，而不是使用下划线”_“。&lt;/li&gt;
  &lt;li&gt;URL路径中首选小写字母。&lt;/li&gt;
  &lt;li&gt;将版本信息放入URL中。
    &lt;h2 id=&quot;http请求方式&quot;&gt;http请求方式&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;GET: 从服务器取出资源（一项或多项）&lt;/li&gt;
  &lt;li&gt;POST: 在服务器新建一个资源&lt;/li&gt;
  &lt;li&gt;PUT: 在服务器更新资源（客户端提供改变后的完整资源）&lt;/li&gt;
  &lt;li&gt;PATCH: 在服务器更新资源（客户端提供改变的属性）&lt;/li&gt;
  &lt;li&gt;DELETE: 从服务器删除资源
    &lt;h2 id=&quot;过滤信息&quot;&gt;过滤信息&lt;/h2&gt;
    &lt;p&gt;在获取资源的时候，有可能需要获取某些“过滤”后的资源，例如指定前10行数据：
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://api.user.com/schools/grades/classes/boys?page=1&amp;amp;page-size=10&lt;/code&gt;&lt;/p&gt;
    &lt;h2 id=&quot;数据格式&quot;&gt;数据格式&lt;/h2&gt;
    &lt;p&gt;使用json数据格式进行数据传递。&lt;/p&gt;
    &lt;h2 id=&quot;状态码&quot;&gt;状态码&lt;/h2&gt;
    &lt;p&gt;RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。&lt;br /&gt;
如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的，无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次，结果总是一样的，后面的请求并不会产生比第一次更多的影响。&lt;br /&gt;
下面列出了GET，DELETE，PUT和POST的典型用法：&lt;/p&gt;
    &lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;安全且幂等&lt;/li&gt;
  &lt;li&gt;200（OK） 表示已在响应中发出&lt;/li&gt;
  &lt;li&gt;204（无内容） 资源为空&lt;/li&gt;
  &lt;li&gt;301（Moved Permanently） 资源的URL已被更新&lt;/li&gt;
  &lt;li&gt;303（See Other） 其他（如，负载均衡）&lt;/li&gt;
  &lt;li&gt;304（not modified）资源未更改（缓存）&lt;/li&gt;
  &lt;li&gt;400 （bad request）指代坏请求&lt;/li&gt;
  &lt;li&gt;404 （not found）资源不存在&lt;/li&gt;
  &lt;li&gt;406 （not acceptable）服务端不支持所需表示&lt;/li&gt;
  &lt;li&gt;500 （internal server error）通用错误响应&lt;/li&gt;
  &lt;li&gt;503 （Service Unavailable）服务端当前无法处理请求
    &lt;h3 id=&quot;post&quot;&gt;POST&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;不安全且不幂等&lt;/li&gt;
  &lt;li&gt;200（OK）如果现有资源已被更改&lt;/li&gt;
  &lt;li&gt;201（created）如果新资源被创建&lt;/li&gt;
  &lt;li&gt;202（accepted）已接受处理请求但尚未完成（异步处理）&lt;/li&gt;
  &lt;li&gt;301（Moved Permanently）资源的URL被更新&lt;/li&gt;
  &lt;li&gt;303（See Other）其他（如，负载均衡）&lt;/li&gt;
  &lt;li&gt;400（bad request）指代坏请求&lt;/li&gt;
  &lt;li&gt;404 （not found）资源不存在&lt;/li&gt;
  &lt;li&gt;406 （not acceptable）服务端不支持所需表示&lt;/li&gt;
  &lt;li&gt;409 （conflict）通用冲突&lt;/li&gt;
  &lt;li&gt;412 （Precondition Failed）前置条件失败（如执行条件更新时的冲突）&lt;/li&gt;
  &lt;li&gt;415 （unsupported media type）接受到的表示不受支持&lt;/li&gt;
  &lt;li&gt;500 （internal server error）通用错误响应&lt;/li&gt;
  &lt;li&gt;503 （Service Unavailable）服务端当前无法处理请求
    &lt;h3 id=&quot;put&quot;&gt;PUT&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;不安全但幂等&lt;/li&gt;
  &lt;li&gt;200 （OK）如果现有资源已被更改&lt;/li&gt;
  &lt;li&gt;201 （created）如果新资源被创建&lt;/li&gt;
  &lt;li&gt;301（Moved Permanently）资源的URL已更改&lt;/li&gt;
  &lt;li&gt;303 （See Other）其他（如，负载均衡）&lt;/li&gt;
  &lt;li&gt;400 （bad request）指代坏请求&lt;/li&gt;
  &lt;li&gt;404 （not found）资源不存在&lt;/li&gt;
  &lt;li&gt;406 （not acceptable）服务端不支持所需表示&lt;/li&gt;
  &lt;li&gt;409 （conflict）通用冲突&lt;/li&gt;
  &lt;li&gt;412 （Precondition Failed）前置条件失败（如执行条件更新时的冲突）&lt;/li&gt;
  &lt;li&gt;415 （unsupported media type）接受到的表示不受支持&lt;/li&gt;
  &lt;li&gt;500 （internal server error）通用错误响应&lt;/li&gt;
  &lt;li&gt;503 （Service Unavailable）服务端当前无法处理请求
    &lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;不安全但幂等&lt;/li&gt;
  &lt;li&gt;200 （OK）资源已被删除&lt;/li&gt;
  &lt;li&gt;301 （Moved Permanently）资源的URIL已更改&lt;/li&gt;
  &lt;li&gt;303 （See Other）其他（如，负载均衡）&lt;/li&gt;
  &lt;li&gt;400 （bad request）指代坏请求&lt;/li&gt;
  &lt;li&gt;404 （not found）资源不存在&lt;/li&gt;
  &lt;li&gt;409 （conflict）通用冲突&lt;/li&gt;
  &lt;li&gt;500 （internal server error）通用错误响应&lt;/li&gt;
  &lt;li&gt;503 （Service Unavailable）服务端当前无法处理请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Created by 15352103&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 27 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//8.%E7%94%9F%E4%BA%A7%E8%A7%84%E8%8C%83%E4%B8%8E%E6%8C%87%E5%8D%97/8.2.REST-API-%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//8.%E7%94%9F%E4%BA%A7%E8%A7%84%E8%8C%83%E4%B8%8E%E6%8C%87%E5%8D%97/8.2.REST-API-%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</guid>
        
        
        <category>8.生产规范与指南</category>
        
      </item>
    
      <item>
        <title>7.2 数据库设计</title>
        <description>
&lt;p&gt;蓝框部分为&lt;strong&gt;用户及权限系统数据库设计&lt;/strong&gt;，其余为&lt;strong&gt;子系统数据库设计&lt;/strong&gt;。
&lt;img src=&quot;/styles/images/7.2/auth-system.jpg&quot; alt=&quot;数据库设计&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 27 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.2.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.2.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid>
        
        
        <category>7.设计说明书</category>
        
      </item>
    
      <item>
        <title>7.3 接口 API 设计</title>
        <description></description>
        <pubDate>Sun, 26 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.3.%E6%8E%A5%E5%8F%A3API%E8%AE%BE%E8%AE%A1/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.3.%E6%8E%A5%E5%8F%A3API%E8%AE%BE%E8%AE%A1/</guid>
        
        
        <category>7.设计说明书</category>
        
      </item>
    
      <item>
        <title>7.4 架构设计</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#架构问题&quot; id=&quot;markdown-toc-架构问题&quot;&gt;架构问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#解决方案说明&quot; id=&quot;markdown-toc-解决方案说明&quot;&gt;解决方案说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#逻辑视图&quot; id=&quot;markdown-toc-逻辑视图&quot;&gt;逻辑视图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#物理视图&quot; id=&quot;markdown-toc-物理视图&quot;&gt;物理视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构问题&quot;&gt;架构问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;服务外部用户&lt;/li&gt;
  &lt;li&gt;需求变动快&lt;/li&gt;
  &lt;li&gt;运用规模变化大&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;解决方案说明&quot;&gt;解决方案说明&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;按照不同服务功能拆分微服务&lt;br /&gt;
  一个服务完成一个独立的功能，独立维护，按需扩展&lt;/li&gt;
  &lt;li&gt;前后端分离&lt;br /&gt;
  优化用户体验，接口简洁易维护，实现前端多渠道集成&lt;/li&gt;
  &lt;li&gt;无状态服务&lt;br /&gt;
  把数据迁移到分布式缓存中存储，让业务服务变成一个无状态的计算节点，实现服务按需动态伸缩&lt;/li&gt;
  &lt;li&gt;Restful通信风格&lt;br /&gt;
  无状态协议HTTP扩展能力强，JSON 报文序列化轻量简单，语言无关&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;逻辑视图&quot;&gt;逻辑视图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/styles/images/7.4/logicView.jpg&quot; alt=&quot;逻辑视图&quot; height=&quot;60%&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;物理视图&quot;&gt;物理视图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/styles/images/7.4/physicalView.jpg&quot; alt=&quot;物理视图&quot; height=&quot;90%&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考&lt;br /&gt;
&lt;a href=&quot;https://juejin.im/entry/59bf30876fb9a00a583176a1&quot;&gt;微服务的4大设计原则和19个解决方案&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 25 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.4.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//7.%E8%AE%BE%E8%AE%A1%E8%AF%B4%E6%98%8E%E4%B9%A6/7.4.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
        
        
        <category>7.设计说明书</category>
        
      </item>
    
      <item>
        <title>6.1 用例图</title>
        <description>
&lt;p&gt;&lt;img src=&quot;https://github.com/sysu-swsad-team/sysu-swsad-team.github.io/raw/master/_posts/images/UML/用例图.jpg&quot; alt=&quot;用例图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Created by 15352103&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//6.%E9%9C%80%E6%B1%82%E8%A7%84%E6%A0%BC%E8%AF%B4%E6%98%8E%E4%B9%A6/6.1.%E7%94%A8%E4%BE%8B%E5%9B%BE/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//6.%E9%9C%80%E6%B1%82%E8%A7%84%E6%A0%BC%E8%AF%B4%E6%98%8E%E4%B9%A6/6.1.%E7%94%A8%E4%BE%8B%E5%9B%BE/</guid>
        
        
        <category>6.需求规格说明书</category>
        
      </item>
    
      <item>
        <title>6.2 用例与活动图</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#详述用例&quot; id=&quot;markdown-toc-详述用例&quot;&gt;详述用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#非正式用例&quot; id=&quot;markdown-toc-非正式用例&quot;&gt;非正式用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#摘要用例&quot; id=&quot;markdown-toc-摘要用例&quot;&gt;摘要用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;详述用例&quot;&gt;详述用例&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用例UC1：做任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;范围&lt;/strong&gt;：圈多多（Niffler）应用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;级别&lt;/strong&gt;：用户目标&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主要参与者&lt;/strong&gt;：大学生&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;涉众及其关注点&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大学生：希望能够准确地筛选感兴趣的任务。希望能够便捷、清晰地查询任务描述和任务薪酬。希望能够在完成任务后，及时、准确地获得相应数额的“闲钱币”。&lt;/li&gt;
  &lt;li&gt;任务发布者：希望发布的任务能够得到有效的完成。希望能够快速审核已完成任务并进行确认。&lt;/li&gt;
  &lt;li&gt;圈多多团队：希望能够准确地记录任务完成信息。希望在任务发布者确认任务已完成后，自动、快速、准确地将“闲钱币”放入相应账号的钱包中。希望有一定的容错性和可恢复性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：大学生必须登录账号。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;成功保证（或后置条件）&lt;/strong&gt;：记录任务完成相关信息。更新财务信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主成功场景（或基本流程）&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户打开圈多多应用，此时已默认登录上一次登录的账号。&lt;/li&gt;
  &lt;li&gt;系统进入任务类型界面（做任务或发布任务）。&lt;/li&gt;
  &lt;li&gt;用户选择做任务功能。&lt;/li&gt;
  &lt;li&gt;系统进入做任务可选项界面（问卷调查任务或跑腿任务）。&lt;/li&gt;
  &lt;li&gt;用户选择问卷调查任务或跑腿任务。&lt;/li&gt;
  &lt;li&gt;系统按照账号初始标签显示任务列表。&lt;/li&gt;
  &lt;li&gt;用户通过标签、薪酬、最新、最热等进一步筛选任务列表。&lt;/li&gt;
  &lt;li&gt;用户查看自己感兴趣的任务。&lt;/li&gt;
  &lt;li&gt;系统显示任务详情。任务详情包括任务描述、任务薪酬、任务剩余次数、任务过期时间、是否可重复等。&lt;/li&gt;
  &lt;li&gt;用户选择接受任务。&lt;/li&gt;
  &lt;li&gt;系统将任务添加到待完成任务列表。&lt;/li&gt;
  &lt;li&gt;用户查看待完成任务列表。&lt;/li&gt;
  &lt;li&gt;用户选择完成任务。&lt;/li&gt;
  &lt;li&gt;问卷调查任务由系统自动确认已完成任务；跑腿任务由任务发布者确认已完成任务。&lt;/li&gt;
  &lt;li&gt;系统为相应账号的钱包增加相应数额的“闲钱币”。&lt;/li&gt;
  &lt;li&gt;系统记录完整的任务完成相关信息，并更新财务信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;扩展（或替代流程）&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;*a. 系统在任意时刻失败：
    &lt;ol&gt;
      &lt;li&gt;系统保存意外退出时的账号状态。&lt;/li&gt;
      &lt;li&gt;用户重启系统，请求恢复上次状态。&lt;/li&gt;
      &lt;li&gt;系统重建上次状态，恢复意外退出时的界面信息。
        &lt;ul&gt;
          &lt;li&gt;3a. 系统在恢复过程中检测到异常：
            &lt;ol&gt;
              &lt;li&gt;系统向用户提示错误，并记录此错误。&lt;/li&gt;
              &lt;li&gt;系统进入一个初始状态（即进入任务类型界面）。&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;4-9a. 用户需要重新选择问卷调查任务或跑腿任务：
    &lt;ol&gt;
      &lt;li&gt;用户选择返回功能。&lt;/li&gt;
      &lt;li&gt;系统进入做任务可选项界面。&lt;/li&gt;
      &lt;li&gt;用户重新选择问卷调查任务或跑腿任务。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;7a. 用户需要重置任务列表：
    &lt;ol&gt;
      &lt;li&gt;用户选择重置功能。&lt;/li&gt;
      &lt;li&gt;系统按照账户初始标签显示任务列表。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;10-13a. 用户需要放弃任务：
    &lt;ol&gt;
      &lt;li&gt;用户选择放弃任务功能。&lt;/li&gt;
      &lt;li&gt;相应任务更新信息，例如，剩余次数加一。&lt;/li&gt;
      &lt;li&gt;系统记录放弃任务相关信息。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;10-13b. 任务超时：
    &lt;ol&gt;
      &lt;li&gt;系统提示用户任务超时。&lt;/li&gt;
      &lt;li&gt;系统将任务从待完成列表移除。&lt;/li&gt;
      &lt;li&gt;系统记录任务超时相关信息，并更新财务信息。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;10-13c. 任务发布者提前终止任务：
    &lt;ol&gt;
      &lt;li&gt;系统提示用户任务发布者提前终止任务。&lt;/li&gt;
      &lt;li&gt;系统将任务从待完成列表移除。&lt;/li&gt;
      &lt;li&gt;系统记录提前终止相关信息，并更新财务信息。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;14a. 对于跑腿任务，任务发布者未在规定时间内确认用户已完成任务：
    &lt;ol&gt;
      &lt;li&gt;系统自动确认用户已完成任务。&lt;/li&gt;
      &lt;li&gt;系统提示任务发布者已自动确认任务完成。&lt;/li&gt;
      &lt;li&gt;系统记录自动确认任务完成相关信息。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;特殊需求&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由于某些原因，我们希望在访问远程服务（如财务系统）失败的情况下具有比较强的恢复功能。&lt;/li&gt;
  &lt;li&gt;支持文本显示的语言国际化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;技术与数据变元表&lt;/strong&gt;：暂无。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;发生频率&lt;/strong&gt;：可能会不断地发生。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未决问题&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;研究远程服务的恢复问题。&lt;/li&gt;
  &lt;li&gt;对于跑腿任务，如果任务发布者否认已完成任务，该怎样进行协调。&lt;/li&gt;
  &lt;li&gt;任务剩余次数为0后，系统将此任务从任务显示列表移除。如果之后存在用户放弃任务的行为发生，此任务将重新出现在任务显示列表。是否应该提升此任务优先级。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;活动图&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/sysu-swsad-team/sysu-swsad-team.github.io/raw/master/_posts/images/UML/活动图_做任务.jpg&quot; alt=&quot;活动图_做任务&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;非正式用例&quot;&gt;非正式用例&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用例UC2：发布任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主成功场景&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;发布者打开圈多多应用，系统进入任务类型界面（做任务或发布任务）。发布者选择发布任务功能，系统进入发布任务可选项界面（问卷调查任务或跑腿任务）。系统进入任务描述界面。发布者填写任务描述。发布者进一步填写任务最大数量、单价、超时时间等信息。系统自动计算总价。发布者使用“闲钱币”进行支付，系统提示任务发布成功。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交替场景&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;任务发布者选择发布任务功能后，如果希望放弃发布任务，选择放弃发布任务功能，系统记录相关信息并进入发布任务可选项界面。&lt;/p&gt;

&lt;p&gt;任务发布者发布任务成功后，如果希望提前终止任务，选择提前终止任务功能，系统自动计算“闲钱币”返还数额并返还至相应账户的钱包。&lt;/p&gt;

&lt;p&gt;任务发布者发布任务成功后，如果任务过期，系统提示发布者任务已过期。系统自动计算“闲钱币”返还数额并返还至相应账户的钱包。&lt;/p&gt;

&lt;p&gt;任务发布者在支付过程中，如果发现“闲钱币”余额不足，可以选择微信、支付宝等方式进行“闲钱币”充值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;活动图&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/sysu-swsad-team/sysu-swsad-team.github.io/raw/master/_posts/images/UML/活动图_发布任务.jpg&quot; alt=&quot;活动图_发布任务&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;摘要用例&quot;&gt;摘要用例&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用例UC3.1：注册/登录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户打开圈多多应用。如果没有注册，选择注册功能，填写姓名、学号、年龄、性别、年级和专业等信息，并上传学生证正面照片进行验证。验证成功后，可以设置昵称、头像，选择感兴趣的标签，并绑定邮箱或手机号。如果已经注册，选择登录功能，用户通过邮箱或手机号进行登录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例UC3.2：提现“闲钱币”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户选择提现功能，账户得到验证之后，将“闲钱币”可用余额转入到第三方支付系统。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例UC3.3：举报任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户发现不恰当任务，可以选择举报任务功能。任务被举报次数达到阈值后，将交由管理员进行审核。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例UC3.4：审核任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;管理员定期对被举报次数达到阈值的任务进行审核。如果审核结果为任务不恰当，将下架此任务，并扣除任务发布者一定比例“闲钱币”作为惩罚。否则将被举报次数清零。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例UC3.5：评价用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;任务发布者可以对完成跑腿任务的用户进行评价。评价结果对其它用户可见。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Created by 15352103&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 00:00:00 +0800</pubDate>
        <link>https://sysu-swsad-team.github.io//6.%E9%9C%80%E6%B1%82%E8%A7%84%E6%A0%BC%E8%AF%B4%E6%98%8E%E4%B9%A6/6.2.%E7%94%A8%E4%BE%8B%E4%B8%8E%E6%B4%BB%E5%8A%A8%E5%9B%BE/</link>
        <guid isPermaLink="true">https://sysu-swsad-team.github.io//6.%E9%9C%80%E6%B1%82%E8%A7%84%E6%A0%BC%E8%AF%B4%E6%98%8E%E4%B9%A6/6.2.%E7%94%A8%E4%BE%8B%E4%B8%8E%E6%B4%BB%E5%8A%A8%E5%9B%BE/</guid>
        
        
        <category>6.需求规格说明书</category>
        
      </item>
    
  </channel>
</rss>
